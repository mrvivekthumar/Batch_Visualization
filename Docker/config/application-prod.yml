# Production Application Configuration
# File: Docker/config/application-prod.yml

spring:
  application:
    name: batch-performance-analyzer
  
  # Database Configuration - Production
  datasource:
    url: jdbc:postgresql://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:performance_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      pool-name: ProdPerformanceHikariCP
      maximum-pool-size: ${DB_POOL_MAX_SIZE:50}
      minimum-idle: ${DB_POOL_MIN_IDLE:10}
      idle-timeout: 600000
      connection-timeout: 30000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      register-mbeans: false
      # Production SSL settings
      data-source-properties:
        ssl: ${DB_SSL_ENABLED:true}
        sslmode: ${DB_SSL_MODE:require}
        sslcert: ${DB_SSL_CERT_PATH:/app/certs/client-cert.pem}
        sslkey: ${DB_SSL_KEY_PATH:/app/certs/client-key.pem}
        sslrootcert: ${DB_SSL_ROOT_CERT_PATH:/app/certs/ca-cert.pem}
        applicationName: batch-performance-analyzer-prod
        tcpKeepAlive: true
        connectTimeout: 10
        socketTimeout: 30
        loginTimeout: 10

  # JPA Configuration - Production
  jpa:
    hibernate:
      ddl-auto: validate  # Never auto-create/drop in production
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        generate_statistics: false
        jdbc:
          batch_size: 1000
          batch_versioned_data: true
          fetch_size: 1000
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: false
          use_query_cache: false
        connection:
          provider_disables_autocommit: true
          autocommit: false
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: 1000

  # Security Configuration - Production
  security:
    require-ssl: ${REQUIRE_SSL:true}
    user:
      name: ${SECURITY_DEFAULT_USER:admin}
      password: ${SECURITY_DEFAULT_PASSWORD}
      roles: ADMIN

  # JMX - Disabled for production
  jmx:
    enabled: false

# Application Security Settings - Production
app:
  security:
    enabled: true
    admin:
      username: ${ADMIN_USERNAME:admin}
      password: ${ADMIN_PASSWORD}
    viewer:
      username: ${VIEWER_USERNAME:viewer}
      password: ${VIEWER_PASSWORD}
    jwt:
      enabled: ${JWT_ENABLED:false}
      secret: ${JWT_SECRET}
      expiration: ${JWT_EXPIRATION:3600000}
  
  # Rate Limiting - Production (more restrictive)
  rate-limit:
    enabled: true
    requests-per-minute: ${RATE_LIMIT_RPM:240}
    burst-capacity: ${RATE_LIMIT_BURST:30}
    performance-operations-per-hour: ${RATE_LIMIT_PERF_OPS:100}
    ip-whitelist: ${RATE_LIMIT_IP_WHITELIST:}

# Performance Testing Configuration - Production
performance:
  test:
    total-records: ${PERF_TEST_TOTAL_RECORDS:50000}
    max-records-per-operation: ${PERF_TEST_MAX_RECORDS:50000}
    max-batch-size: ${PERF_TEST_MAX_BATCH:5000}
    batch-sizes: ${PERF_TEST_BATCH_SIZES:1,10,100,1000,5000}
    memory-threshold-mb: ${PERF_TEST_MEMORY_THRESHOLD:2048}
    connection-pool:
      max-size: ${DB_POOL_MAX_SIZE:50}
      min-idle: ${DB_POOL_MIN_IDLE:10}
    metrics:
      collection-interval: ${METRICS_INTERVAL:5000}
      enable-system-metrics: true
      enable-jvm-metrics: true
      enable-database-metrics: true

# Server Configuration - Production
server:
  port: ${SERVER_PORT:8080}
  address: ${SERVER_ADDRESS:0.0.0.0}
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  # Security headers
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
    whitelabel:
      enabled: false
  # Connection settings
  tomcat:
    connection-timeout: 20000
    max-connections: 8192
    max-http-form-post-size: 2MB
    max-swallow-size: 2MB
    threads:
      max: 200
      min-spare: 10
    accesslog:
      enabled: ${ACCESS_LOG_ENABLED:true}
      directory: /app/logs
      file-date-format: .yyyy-MM-dd
      pattern: "%h %l %u %t \"%r\" %s %b %D"
      prefix: access_log
      suffix: .log

# Actuator Configuration - Production (Secured)
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
      base-path: /actuator
      cors:
        allowed-origins: ${ACTUATOR_CORS_ORIGINS:http://localhost:3000}
        allowed-methods: GET,POST
    jmx:
      exposure:
        exclude: "*"
  
  endpoint:
    health:
      show-details: when-authorized
      show-components: when-authorized
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState,diskSpace
        readiness:
          include: readinessState,db,ping
    metrics:
      enabled: true
    info:
      enabled: true
    prometheus:
      enabled: ${PROMETHEUS_ENABLED:true}

  # Security for actuator endpoints
  security:
    enabled: true

  # Prometheus configuration
  prometheus:
    metrics:
      export:
        enabled: ${PROMETHEUS_ENABLED:true}
        step: ${PROMETHEUS_STEP:PT30S}

  # Metrics configuration - Production
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
        jvm.memory.used: true
        jvm.gc.pause: true
        system.cpu.usage: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms,100ms,200ms,500ms,1s,2s,5s
    enable:
      jvm: true
      system: true
      process: true
      jdbc: true
      hikaricp: false
    tags:
      application: ${spring.application.name}
      environment: production
      region: ${DEPLOY_REGION:us-east-1}
      version: ${APP_VERSION:2.0.0}

# Logging Configuration - Production
logging:
  config: classpath:logback-prod.xml
  level:
    root: WARN
    com.vivek: INFO
    org.springframework.security: WARN
    org.springframework.web: WARN
    org.hibernate: WARN
    org.hibernate.SQL: WARN
    org.hibernate.orm.jdbc.bind: WARN
    io.micrometer: WARN
    org.springframework.jmx: OFF
    org.springframework.boot.actuate: WARN
    org.apache.tomcat: WARN
    org.apache.catalina: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{50} - %msg%n"
  file:
    name: /app/logs/application.log
    max-size: ${LOG_FILE_MAX_SIZE:100MB}
    max-history: ${LOG_FILE_MAX_HISTORY:30}
    total-size-cap: ${LOG_FILE_TOTAL_SIZE:1GB}

# Custom Production Settings
production:
  features:
    # Feature flags for production
    enable-performance-tests: ${ENABLE_PERFORMANCE_TESTS:true}
    enable-metrics-collection: ${ENABLE_METRICS:true}
    enable-health-checks: ${ENABLE_HEALTH_CHECKS:true}
    enable-rate-limiting: ${ENABLE_RATE_LIMITING:true}
    enable-security: ${ENABLE_SECURITY:true}
  
  monitoring:
    # External monitoring endpoints
    prometheus-url: ${PROMETHEUS_URL:http://prometheus:9090}
    grafana-url: ${GRAFANA_URL:http://grafana:3000}
    alertmanager-url: ${ALERTMANAGER_URL:http://alertmanager:9093}
  
  database:
    # Database maintenance settings
    connection-validation-query: "SELECT 1"
    test-on-borrow: true
    test-while-idle: true
    validation-interval: 30000
    
  backup:
    # Backup configuration
    enabled: ${BACKUP_ENABLED:false}
    schedule: ${BACKUP_SCHEDULE:0 2 * * *}
    retention-days: ${BACKUP_RETENTION:30}
    s3-bucket: ${BACKUP_S3_BUCKET}
    s3-region: ${BACKUP_S3_REGION:us-east-1}